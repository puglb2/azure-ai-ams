name: Azure Static Web Apps CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    types: [ opened, synchronize, reopened, closed ]
    branches: [ main ]

# Set these to where your app & api live
env:
  APP_LOCATION: "/"       # "/" = repo root. If your frontend is in web/, set "web"
  API_LOCATION: "api"     # "" if you have no Functions
  OUTPUT_LOCATION: "dist" # Vite build output folder

jobs:
  build_and_deploy_job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # (Optional) show the structure the action will use
      - name: Debug layout
        run: |
          echo "=== app ($APP_LOCATION) ==="; ls -la "${{ env.APP_LOCATION }}" || true
          echo "=== api ($API_LOCATION) ==="; ls -la "${{ env.API_LOCATION }}" || true
          echo "=== package.json ==="; sed -n '1,120p' "${{ env.APP_LOCATION }}/package.json" || true
          echo "=== host.json ==="; sed -n '1,120p' "${{ env.API_LOCATION }}/host.json" || true
          echo "=== function.json files ==="; find "${{ env.API_LOCATION }}" -name function.json -print || true

      - name: Build & Deploy (Oryx)
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: upload
          app_location: ${{ env.APP_LOCATION }}         # folder containing package.json + index.html
          output_location: ${{ env.OUTPUT_LOCATION }}   # Oryx will build to dist; this is what gets uploaded
          api_location: ${{ env.API_LOCATION }}         # folder with host.json and functions
          # Optional: you can force the build command if you want
          app_build_command: "npm install && npm run build"
          # Leave skip_* flags out so Oryx handles detection/build
